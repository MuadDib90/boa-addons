version "3.7.2"

class MovementBoAPlayer: BoAPlayer
{
	static const Name heavyitems[] = {'TrenchShotgun', 'Browning5', 'MP40', 'Sten', 'Kar98k', 'G43', 'Pyrolight', 'Nebelwerfer', 'Panzerschreck', 'TeslaCannon',
		'UMG43', 'Ammo9mm', 'Ammo12Gauge', 'MauserAmmo', 'FlameAmmo', 'NebAmmo', 'PanzerAmmo', 'TeslaCell', 'GrenadePickup', 'Minesweeper',
		'DeployableMine'};
	static const double itemweights[] = {3.6, 4.1, 4.0, 3.2, 4.1, 4.4, 18.0, 15.0, 11.0, 8.0,
		24.0, 0.02, 0.05, 0.04, 0.04, 0.2, 3.3, 0.2, 0.6, 14.0,
		2.0};
	const totalitems = 21;
    int lastkey;
	int time_l, time_r, cooldown;
	int deltaroll;
	Default
	{
		Speed 1.25;
		+ROLLSPRITE
		+ROLLCENTER
		//By using the 'chase' console command you can see that Blazkowicz turns to the wrong side.
		//It works all fine for mirrors though.
		//If N00b wasn't as lazy ;-) , he would have fixed this
		//by drawing and adding properly rotated rolling sprites.
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		dodragging = true;
	}
	
	void WeightAdjustSpeed()
	{
		double weight = 100.0, t;
		for (int i = 0; i < totalitems; ++i)
		{
			weight += CountInv(heavyitems[i]) * itemweights[i];
		}
		speed *= 100.0 / weight;
	}
	
    void CheckForRoll()
    {
		//only when crouching at least a bit
		int newkey = GetPlayerInput(MODINPUT_BUTTONS);
		if (player.crouchfactor != 1 && newkey & BT_MOVELEFT)
		{
			if (lastkey == 0 && time_l > 0 && !cooldown)
			{ //Double tap, so roll to the left:
				A_ChangeVelocity(0, 15, 0, CVF_RELATIVE);
				cooldown = 64;
				deltaroll = -360; //space this across 24 tics
				lastkey = 0;
			}
			else { lastkey = -1; time_l = 16; }
		}
		else if (player.crouchfactor != 1 && newkey & BT_MOVERIGHT)
		{
			if (lastkey == 0 && time_r > 0 && !cooldown)
			{
				A_ChangeVelocity(0, -15, 0, CVF_RELATIVE);
				cooldown = 64;
				deltaroll = 360;
				lastkey = 0;
			}
			else { lastkey = 1; time_r = 16; }
		}
		else
		{
			lastkey = 0;
		}
    }
	
	//the following is to avoid default sprint handling
	override void Tick()
	{
		if (player && !player.morphtics)
		{
			if (Level.time % (35 * 5) == 0) { ForcedHealthBar = GetClosestForcedHealthBar(); } // Only run this check occasionally

			CrosshairTarget = GetLineTarget();

			DoGravity();

			DoTokenChecks();

			DoInteractions();
			
			if (level.mapname != "TITLEMAP")
			{
				// Do screen drawing actions
				if (!FindInventory("TankMorph", 1)) // Only do these if you're not driving a tank
				{
					if (!CountInv("Billy"))
					{
						// Do visual effects
						ACS_NamedExecuteAlways("DoFlinchRecovery_Wrapper", 0);
						ACS_NamedExecuteAlways("DoTiltEffect_Wrapper", 0);
					}
				}
			}
			WeightAdjustSpeed();
			//WeightAdjustJumpSpeed();
			if (health > 0) { CheckForRoll(); }
			if (time_l > 0) { --time_l; }
			if (time_r > 0) { --time_r; }
			if (cooldown > 0) { --cooldown; }
			if (deltaroll > 0) { A_SetRoll((roll + 15) % 360, SPF_INTERPOLATE); deltaroll -= 15; }
			else if (deltaroll < 0) { A_SetRoll((roll - 15) % 360, SPF_INTERPOLATE); deltaroll += 15; }
			else if (roll != 0) { A_SetRoll(0, SPF_INTERPOLATE); }
		}
		PlayerPawn.Tick();
	}
	
	void DoSprinting() //translation of the ACS function
	{
		if (CountInv("IsDragging")) { return; }
		bool checksprint = CVar.GetCVar("boa_sprintswitch", player).GetBool();
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int p = PlayerNumber();
		speed = Default.Speed;
		MovementHandler mh = ((MovementHandler) (EventHandler.Find("MovementHandler")));
		if (!mh) return;
		if (ACSTools.IsNoClipping(self))
		{
			speed = 2.5;
			mh.cooldown[p] = 0;
			mh.staminarecoverytimeout[p] = 0;
			GiveInventory("Stamina", 100);
		}
		if (
			(buttons & BT_SPEED) && 
			(buttons & BT_FORWARD) && 
			!(buttons & BT_CROUCH) &&
			mh.cooldown[p] <= 0 &&
			CountInv("Stamina")
		)
		{
			speed *= 2.0;
			if (!checksprint && !CountInv("BerserkToken"))
			{
				TakeInventory("Stamina", Random(1, 3));
			}
		}
		else
		{
			if (mh.staminarecoverytimeout[p] < level.time)
			{
				mh.cooldown[p]--;
				GiveInventory("Stamina",1);
				mh.staminarecoverytimeout[p] = level.time + Random(1, 3);
			}
		}
		if (!CountInv("Stamina")) { mh.cooldown[p] = 100; }
	}
}

class MovementHandler: EventHandler
{
	int cooldown[MAXPLAYERS];
	int staminarecoverytimeout[MAXPLAYERS];
}